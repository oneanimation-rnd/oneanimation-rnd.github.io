îœ¼ :py:mod:`bd.storage.queries`
==========================================================

.. py:module:: bd.storage.queries


Module Contents
---------------

.. py:data:: FIND_COMPONENTS_QUERY
   :annotation: = Multiline-String

    .. raw:: html

        <details><summary>Show Value</summary>

    .. code-block:: text
        :linenos:

        
        query FindComponents($tags: jsonb!, $fields: jsonb!, $limit: Int = 100) {
            components(
                where: {
                    tags: {_contains: $tags},
                    fields: {_contains: $fields}
                }, 
                order_by: {created_at: desc},
                limit: $limit
            ) {
                id
                tags
                fields
            }
        }


    .. raw:: html

        </details>

   

.. py:data:: GET_REVISIONS_QUERY
   :annotation: = Multiline-String

    .. raw:: html

        <details><summary>Show Value</summary>

    .. code-block:: text
        :linenos:

        
        query GetRevisions($id: String!, $limit: Int = 10) {
            component_revisions(
                where: {
                    component_id: {_eq: $id}
                }, 
                order_by: {id: desc},
                limit: $limit
            ) {
                id
                version
                published
                comment
                created_at
                user {
                    id
                    email
                    picture
                }
            }
        }


    .. raw:: html

        </details>

   

.. py:data:: REMOVE_COMPONENT_MUTATION
   :annotation: = Multiline-String

    .. raw:: html

        <details><summary>Show Value</summary>

    .. code-block:: text
        :linenos:

        
        mutation RemoveComponent($id: String!) {
            delete_component_by_pk(id: $id) {
                id
            }
        }


    .. raw:: html

        </details>

   

.. py:data:: CREATE_REVISION_MUTATION
   :annotation: = Multiline-String

    .. raw:: html

        <details><summary>Show Value</summary>

    .. code-block:: text
        :linenos:

        
        mutation CreateRevision($id: String!, $tags: jsonb!, $fields: jsonb!) {
            insert_component_revisions_one(
                object: {
                    published: false,
                    component: {
                        data: {
                            id: $id,
                            tags: $tags,
                            fields: $fields
                        },
                        on_conflict: {
                            constraint: components_pkey,
                            update_columns: id
                        }
                    }      
                },
                on_conflict: {
                    constraint: component_revisions_component_id_version_key,
                    update_columns: component_id
                }
            ) {
                id
                version
                published
                comment
                created_at
                user_id
                user {
                    email
                }
            }
        }


    .. raw:: html

        </details>

   

.. py:data:: PUBLISH_REVISION_MUTATION
   :annotation: = Multiline-String

    .. raw:: html

        <details><summary>Show Value</summary>

    .. code-block:: text
        :linenos:

        
        mutation PublishRevision($revision_id: Int!, $comment: String) {
            update_component_revisions_by_pk(
                _set: {published: true, comment: $comment}, 
                pk_columns: {id: $revision_id }
            ) {
                id
            }
        }


    .. raw:: html

        </details>

   

.. py:data:: ACQUIRE_REVISION_MUTATION
   :annotation: = Multiline-String

    .. raw:: html

        <details><summary>Show Value</summary>

    .. code-block:: text
        :linenos:

        
        mutation AcquireRevision($revision_id: Int!, $user_id: String!) {
            update_component_revisions_by_pk(
                _set: {user_id: $user_id}, 
                pk_columns: {id: $revision_id}
            ) {
                id
            }
        }


    .. raw:: html

        </details>

   

.. py:data:: REMOVE_REVISION_MUTATION
   :annotation: = Multiline-String

    .. raw:: html

        <details><summary>Show Value</summary>

    .. code-block:: text
        :linenos:

        
        mutation RemoveRevision($id: Int!) {
            delete_component_revisions_by_pk(id: $id) {
                id
            }
        }


    .. raw:: html

        </details>

   

