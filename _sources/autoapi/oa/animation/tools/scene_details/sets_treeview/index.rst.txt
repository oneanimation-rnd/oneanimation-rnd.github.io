îœ¼ :py:mod:`oa.animation.tools.scene_details.sets_treeview`
==================================================================================================================

.. py:module:: oa.animation.tools.scene_details.sets_treeview


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   oa.animation.tools.scene_details.sets_treeview.SetsTreeView
   oa.animation.tools.scene_details.sets_treeview.AssetProxyModel
   oa.animation.tools.scene_details.sets_treeview.AssetTreeModel
   oa.animation.tools.scene_details.sets_treeview.AssetTreeNode




.. py:class:: SetsTreeView(parent=None)

   Bases: :py:obj:`PySide2.QtWidgets.QTreeView`

   .. py:method:: mouseReleaseEvent(event)


   .. py:method:: keyPressEvent(event)


   .. py:method:: on_menu_on_requested(point)


   .. py:method:: on_expanded(top_index)


   .. py:method:: on_collapsed(top_index)


   .. py:method:: on_double_clicked(index)


   .. py:method:: on_select_triggered()


   .. py:method:: on_frame_camera_triggered()


   .. py:method:: on_show_namespaces_triggered()


   .. py:method:: selected_indexes()


   .. py:method:: clear_tree()


   .. py:method:: fill_tree(namespaces)

      Reset and add tree node objects.


   .. py:method:: update_filter(pattern)

      Updates proxy's filter string.


   .. py:method:: collect_objs_by_selection()



.. py:class:: AssetProxyModel(parent=None)

   Bases: :py:obj:`PySide2.QtCore.QSortFilterProxyModel`

   Proxy used between QTreeView and QAbstractItemModel to filter and sort items.

   .. py:method:: filterAcceptsRow(row, parent_index)

      Built-in function to filter what items are seen.


   .. py:method:: has_accepted_children(pattern, tree_node)

      Recursively searches through tree node's children to see if it matches the supplied pattern.
      This is used so for filtering so that the parent remains visible if it has a valid child.



.. py:class:: AssetTreeModel(parent=None)

   Bases: :py:obj:`PySide2.QtCore.QAbstractItemModel`

   
   QTreeView uses this class to handle all its data for best performance.

   .. py:attribute:: ColumnName
      :annotation: = 0

      

   .. py:method:: columnCount(index=QtCore.QModelIndex())


   .. py:method:: rowCount(index=QtCore.QModelIndex())


   .. py:method:: index(row, column, index=QtCore.QModelIndex())


   .. py:method:: parent(index)


   .. py:method:: hasChildren(index)


   .. py:method:: data(index, role)

      Edit this to determine how the model should get its data from tree nodes.


   .. py:method:: setData(index, value, role=QtCore.Qt.EditRole)

      Edit this to determine how the model should set data back onto tree nodes.


   .. py:method:: flags(index)

      Sets a role for columns.


   .. py:method:: headerData(section, orientation, role)


   .. py:method:: get_data(namespaces)


   .. py:method:: traverse_all_rows(index=None)



.. py:class:: AssetTreeNode(parent, node_type, _data, meta_data=None)

   Bases: :py:obj:`object`

   The tree's model will be populated with this.

   .. py:method:: data(column)

      Fetches data by column.


   .. py:method:: setData(column, value)

      Sets value to internal data.


   .. py:method:: appendChild(node_type, _data, meta_data=None)

      Appends a new AssetTreeNode child to self.


   .. py:method:: removeChild(position)


   .. py:method:: removeChildren()


   .. py:method:: child(row)

      Fetches child by relative row index.


   .. py:method:: childrenCount()

      Gets number of children.


   .. py:method:: hasChildren()

      Returns True if self has children.


   .. py:method:: row()

      Gets self's current row index.


   .. py:method:: columnCount()

      Gets self's number of columns.



