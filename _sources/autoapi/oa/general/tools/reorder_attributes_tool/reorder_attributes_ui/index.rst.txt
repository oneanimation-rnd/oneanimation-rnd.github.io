îœ¼ :py:mod:`oa.general.tools.reorder_attributes_tool.reorder_attributes_ui`
==================================================================================================================================================

.. py:module:: oa.general.tools.reorder_attributes_tool.reorder_attributes_ui


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   oa.general.tools.reorder_attributes_tool.reorder_attributes_ui.AttributeItem
   oa.general.tools.reorder_attributes_tool.reorder_attributes_ui.AttributeDisplayWidget
   oa.general.tools.reorder_attributes_tool.reorder_attributes_ui.DropListWidget
   oa.general.tools.reorder_attributes_tool.reorder_attributes_ui.ReorderAttributesWidget



Functions
~~~~~~~~~

.. autoapisummary::

   oa.general.tools.reorder_attributes_tool.reorder_attributes_ui.mayaWindow
   oa.general.tools.reorder_attributes_tool.reorder_attributes_ui.mayaToQT
   oa.general.tools.reorder_attributes_tool.reorder_attributes_ui.qtToMaya
   oa.general.tools.reorder_attributes_tool.reorder_attributes_ui.getChannelBox
   oa.general.tools.reorder_attributes_tool.reorder_attributes_ui.getChannelBoxMenu
   oa.general.tools.reorder_attributes_tool.reorder_attributes_ui.show
   oa.general.tools.reorder_attributes_tool.reorder_attributes_ui.install



Attributes
~~~~~~~~~~

.. autoapisummary::

   oa.general.tools.reorder_attributes_tool.reorder_attributes_ui.qtVersion
   oa.general.tools.reorder_attributes_tool.reorder_attributes_ui.TITLE
   oa.general.tools.reorder_attributes_tool.reorder_attributes_ui.CHANNELBOX
   oa.general.tools.reorder_attributes_tool.reorder_attributes_ui.DIVIDER_NAME
   oa.general.tools.reorder_attributes_tool.reorder_attributes_ui.BUTTON_NAME


.. py:data:: qtVersion
   

   

.. py:data:: TITLE
   :annotation: = Reorder Attributes

   

.. py:data:: CHANNELBOX
   :annotation: = ChannelBoxForm

   

.. py:data:: DIVIDER_NAME
   :annotation: = reorderAttrDivider

   

.. py:data:: BUTTON_NAME
   :annotation: = reorderAttrButton

   

.. py:function:: mayaWindow()

   Get Maya's main window.

   :rtype: QMainWindow


.. py:function:: mayaToQT(name)

   Maya -> QWidget
   :param str name: Maya name of an ui object
   :return: QWidget of parsed Maya name
   :rtype: QWidget


.. py:function:: qtToMaya(widget)

   QWidget -> Maya name
   :param QWidget widget: QWidget of a maya ui object
   :return: Maya name of parsed QWidget
   :rtype: str


.. py:function:: getChannelBox()

   Get ChannelBox, convert the main channel box to QT.
   :return: Maya's main channel box
   :rtype: QWidget


.. py:function:: getChannelBoxMenu()

   Get ChannelBox Menu, convert the main channel box to QT and return the
   Edit QMenu which is part of the channel box' children.
   :return: Maya's main channel box menu
   :rtype: QMenu


.. py:class:: AttributeItem(node, attr)

   Bases: :py:obj:`QListWidgetItem`

   .. py:property:: node


   .. py:property:: attr


   .. py:property:: name


   .. py:method:: rename(mode)

      Rename the attribute with the mode, the three possible modes and
      correspoding names have been stored during the initializing of this
      item.


   .. py:method:: delete()

      Delete attribute, first set the lock stated of the attribute to false
      so the attribute can actually be deleted. These two functions are
      wrapped into one undo chunk for later undoing.



.. py:class:: AttributeDisplayWidget(parent=None, defaultName='Long')

   Bases: :py:obj:`QWidget`

   .. py:attribute:: signal
      

      

   .. py:method:: buttonReleased()

      When the radio button selection is changed this command gets called,
      it will read the name of the selected button. This name will get lower
      cased and parsed into the signal that gets emitted.



.. py:class:: DropListWidget(parent=None)

   Bases: :py:obj:`QListWidget`

   .. py:property:: attributes

      Get all attributes in the widget, this list is reversed as its needed
      to start the deletion process of the attributes in reverse.

      :return: List of attributes ( AttributeItem )
      :rtype: list

   .. py:attribute:: signal
      

      

   .. py:method:: addMenuActions()


   .. py:method:: rename(mode)

      Rename all attributes by setting the mode, this mode can be three
      different things as have been initialized in the attribute item.

      :param str mode: Attribute name mode: "long", "short" or "nice".


   .. py:method:: updateUI(node, mode)

      Based on the input the widget gets updated with a list of the user
      defined attributes of the parsed nodes. The attributes display name
      depends on the mode.

      :param str node: Node of which to query user defined attributes
      :param str mode: Attribute name mode: "long", "short" or "nice".


   .. py:method:: dropEvent(event)


   .. py:method:: sortItems()



.. py:class:: ReorderAttributesWidget(parent=None)

   Bases: :py:obj:`QWidget`

   .. py:property:: title

      The title of the window, this title differs based on the selection.
      If no node is active, the default title will be returned. If a node is
      active, the full path will be stripped into a base name and appened
      to the default title.

      :return: Window title
      :rtype: str

   .. py:method:: isReferenced()

      Check if the node selected is referenced, reordering of attributes is
      not supported on referenced objects.

      :return: Referenced state of self.node
      :rtype: bool


   .. py:method:: updateUI(*args)

      Update function gets ran every time the selection is changed. The
      latest selected node will be queried. The list widget updated with the
      attributes of that node. The UI is disabled of the node selected is
      referenced.


   .. py:method:: reorder()

      Reorder all of the attributes based on the new attribute list. All of
      the attributes in the list are deleted, they are deleted in such an
      order that when all of the deletion are undone. The attribute order
      is changed to what the input of the user.


   .. py:method:: addCallback()

      Register a callback to run the update function every time the
      selection list is modified.


   .. py:method:: removeCallback()

      Remove the callback that updates the ui every time the selection
      list is modified.


   .. py:method:: closeEvent(event)

      Subclass the closeEvent function to first remove the callback,
      this callback shouldn't be floating around and should be deleted
      with the widget.



.. py:function:: show(*args)


.. py:function:: install()

   Add two additional buttons to the Channel Box -> Edit menu, a divider and
   a button to open up the attribute reordering ui. The edit menu is
   retrieved from the channel box form and a mel command is ran to populate
   this menu in case it hasn't been opened before. If reorderAttributes is
   already installed the original buttons will be removed and new ones
   created.


