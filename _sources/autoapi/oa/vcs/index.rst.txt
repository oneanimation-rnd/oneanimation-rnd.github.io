îœ¼ :py:mod:`oa.vcs`
==================================

.. py:module:: oa.vcs


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   oa.vcs.FileSystemAccessor
   oa.vcs.FTPAccessor
   oa.vcs.Transaction
   oa.vcs.VCS



Functions
~~~~~~~~~

.. autoapisummary::

   oa.vcs._json_encoder
   oa.vcs._tokenize
   oa.vcs._untokenize
   oa.vcs.make_database_key
   oa.vcs.make_temp_path
   oa.vcs.make_versioned_path
   oa.vcs.parse_annotation
   oa.vcs.json_dump
   oa.vcs.text_dump
   oa.vcs.refresh_filesystem



Attributes
~~~~~~~~~~

.. autoapisummary::

   oa.vcs.LOGGER


.. py:data:: LOGGER
   

   

.. py:function:: _json_encoder(obj)


.. py:function:: _tokenize(path)

   Replace path elements with environment variables.

   :param path: path to convert.
   :type path: str

   :returns: Tokenized path.
   :rtype: str


.. py:function:: _untokenize(path)

   Replace any environment variables with their corresponding values.

   :param path: path to convert.
   :type path: str

   :returns: Untokenized path.
   :rtype: str


.. py:exception:: VCSError

   Bases: :py:obj:`Exception`

   Common base class for all non-exit exceptions.

   Initialize self.  See help(type(self)) for accurate signature.


.. py:class:: FileSystemAccessor

   Bases: :py:obj:`object`

   .. py:method:: is_supported(path)


   .. py:method:: upload(source_path, target_path, mode=775)


   .. py:method:: rm(target_path)


   .. py:method:: make_dir(target_path, recursive=False)


   .. py:method:: _get_transit_path(target_path)



.. py:class:: FTPAccessor(host=get_value('ftp/host'), username=get_value('ftp/username'), password=get_value('ftp/password'), root=get_value('ftp/root'), timeout=get_value('ftp/timeout'))

   Bases: :py:obj:`object`

   .. py:method:: _ensure_connected()


   .. py:method:: _get_local_path(remote_path)


   .. py:method:: _get_remote_path(local_path)


   .. py:method:: _get_transit_path(target_path)


   .. py:method:: is_supported(path)


   .. py:method:: read(source_path)


   .. py:method:: upload(source_path, target_path, mode=775)


   .. py:method:: rm(target_path)


   .. py:method:: _is_dir(target_path)


   .. py:method:: _is_file(target_path)


   .. py:method:: make_dir(target_dir, recursive=False)


   .. py:method:: _exists(target_path)



.. py:class:: Transaction(vcs, accessors)

   Bases: :py:obj:`object`

   .. py:method:: _register_upload(source_path, target_path, mode=775, record_id=None)


   .. py:method:: _add_db_record(path, version, metadata)


   .. py:method:: add_item(path, version=None, update_db=True, mode=775, **metadata)


   .. py:method:: add_annotation(path, mode=775, suffix='.meta', as_json=True, **metadata)

      Create annotation .txt file.
      :param path: a file path for which to create annotation.
      :type path: str
      :param comment: a comment string.
      :type comment: str


   .. py:method:: execute()



.. py:function:: make_database_key(path)


.. py:function:: make_temp_path()


.. py:function:: make_versioned_path(path, version)

   Build a versioned path from the provided one.

   :param path: input path with or without version in it.
   :type path: str
   :param version: version number.
   :type version: int

   Return (str): versioned path.



.. py:function:: parse_annotation(path)


.. py:function:: json_dump(data, f)


.. py:function:: text_dump(data, f)


.. py:function:: refresh_filesystem(path)


.. py:class:: VCS(studios=None, db_hosts=get_value('mongodb/hosts'), db_replicate_set=get_value('mongodb/replica_set'), db_read_preference=pymongo.ReadPreference.PRIMARY_PREFERRED if get_value('studio') == 'SG' else pymongo.ReadPreference.SECONDARY_PREFERRED, db_name='oa_central_db', db_collection='files', db_connect=False, db_connect_timeout_ms=120000, db_server_selection_timeout_ms=120000)

   Bases: :py:obj:`object`

   A class responsible for version
   management and making file transactions to the
   remote server.


   Constructor.

   :param studios: a list of studio locations e.g. ['SG', 'JK'].
                   By default it's a current studio location.
   :type studios: list[str]
   :param db_name: database name.
   :type db_name: str
   :param db_collection: collection name.
   :type db_collection: str

   .. py:method:: db()


   .. py:method:: create_transaction()

      A context to initiate and perform transaction to the remote server.

      Return (Transaction): a transaction object with already
          established remote connections.



   .. py:method:: get_last_revision(path, active_only=True)


   .. py:method:: get_revisions(path, limit=0, active_only=False)

      Gets all the database records of the file specified by path.

      :param path: input path.
      :type path: str

      Kwargs:
          limit (int): number of records to return in a single batch.
          active_only (bool): return only records with 'active' flag set to true.

      :returns: a list of all revisions of the file.
      :rtype: list[dict]


   .. py:method:: remove_revision(path, version)

      Deactivate a specific file revision.

      :param path: file path.
      :type path: str
      :param version: revision version to remove.
      :type version: int



